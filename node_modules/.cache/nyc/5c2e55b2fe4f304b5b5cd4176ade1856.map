{"version":3,"sources":["controller.js"],"names":["postsController","req","res","json","message","posts","parties","status","user","office","candidates","votes","petition","id","parseInt","length","body","name","HQAddress","logourl","newPost","created_at","moment","utc","format","push","firstname","lastname","othername","email","phonenumber","passporturl","isadmin","idoff","idparty","idcnd","party","candidate","createdon","createdby","type","params","post","find","oneuser","onePost","error","oneparties","oneoffice","onecandidates","onevotes","onepetition","updatePost","findPost","pop","newparties","filter","Posts"],"mappings":"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","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/Politico/controller","sourcesContent":["import user from \"../db/user\";\r\nimport parties from \"../db/parties\";\r\nimport office from \"../db/office\";\r\nimport candidates from \"../db/candidates\";\r\nimport votes from \"../db/votes\";\r\nimport petition from \"../db/Petition\";\r\nimport moment from \"moment\";\r\n\r\nclass postsController {\r\n  static getparties(req, res) {\r\n    return res.json({\r\n      message: \"List of all parties\",\r\n      posts: parties\r\n    });\r\n}\r\n    static getuser(req, res) {\r\n        return res.json({\r\n          status:200,  \r\n          message: \"List of all user\",\r\n          posts: user\r\n        });\r\n    }\r\n\r\n        static getoffice(req, res) {\r\n            return res.json({\r\n              status:200,  \r\n              message: \"List of all office\",\r\n              posts: office\r\n            });\r\n  }\r\n\r\n  static getcandidates(req, res) {\r\n    return res.json({\r\n      status:200,  \r\n      message: \"List of all candidates\",\r\n      posts: candidates\r\n    });\r\n\r\n  }\r\n    static getvotes(req, res) {\r\n        return res.json({\r\n          status:200,  \r\n          message: \"List of all votes\",\r\n          posts: votes\r\n        });\r\n    }\r\n\r\n        static getpetition(req, res) {\r\n            return res.json({\r\n              status:200,  \r\n              message: \"List of all petitions\",\r\n              posts: petition\r\n            });\r\n} \r\n\r\n//create function\r\nstatic createparties(req, res) {\r\n    const id = parseInt(parties.length) + 1;\r\n    const {name,HQAddress,logourl} = req.body;\r\n    const newPost = {\r\n      id,\r\n      name,\r\n      HQAddress,\r\n      logourl,\r\n      created_at: moment.utc().format()\r\n    };\r\n    parties.push(newPost);\r\n    return res.status(200).json({  \r\n      message: \"created a new party\"\r\n    });\r\n\r\n  }\r\n\r\n  static createuser(req, res) {\r\n    const id = parseInt(user.length) + 1;\r\n    const {firstname,lastname,othername,email,phonenumber,passporturl} = req.body;\r\n    const newPost = {\r\n      id,\r\n      firstname,\r\n      lastname,\r\n      othername,\r\n      email,\r\n      phonenumber,\r\n      passporturl,\r\n      isadmin:'false',\r\n      \r\n    };\r\n    user.push(newPost);\r\n    return res.status(200).json({  \r\n      message: \"created a new user\"\r\n    });\r\n  }\r\n\r\n  static createcandidates(req, res) {\r\n    const id = parseInt(candidates.length) + 1;\r\n    office.id=1\r\n    parties.id=2\r\n    user.id=3\r\n\r\n    const idoff=office.id;\r\n    const idparty= parties.id;\r\n    const idcnd=user.id;\r\n\r\n    const newPost = {\r\n      id,\r\n      office:idoff,\r\n      party:idparty,\r\n      candidate:idcnd,\r\n\r\n      \r\n      \r\n    };\r\n    candidates.push(newPost);\r\n    return res.status(200).json({  \r\n      message: \"created a new candidates\"\r\n    });\r\n  }\r\n\r\n\r\n  static createpetition(req, res) {\r\n    const id = parseInt(parties.length) + 1;\r\n    office.id=1\r\n    user.id=3\r\n\r\n    const idoff=office.id;\r\n    const idcnd=user.id;\r\n\r\n    const {body} = req.body;\r\n    const newPost = {\r\n      id,\r\n      createdon:moment.utc().format(),\r\n      createdby:idcnd,\r\n      office:idoff,\r\n      body,\r\n    };\r\n    petition.push(newPost);\r\n    return res.status(200).json({  \r\n      message: \"created a new petition\"\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  static createoffice(req, res) {\r\n    const id = parseInt(parties.length) + 1;\r\n    const {type,name}= req.body;\r\n    const newPost = {\r\n      created_at: moment.utc().format(),\r\n      id,\r\n      type,\r\n      name,\r\n     \r\n    };\r\n    office.push(newPost);\r\n    return res.status(200).json({  \r\n      message: \"created a new office\"\r\n    });\r\n  }\r\n\r\n////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////\r\n//get user by id\r\nstatic getOneuser(req, res) {\r\n  const { id } = req.params;\r\n  const post = user.find(oneuser => oneuser.id == id);\r\n  if (post) {\r\n    return res.status(200).json({\r\n      message: \"one user found\",\r\n      onePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no user found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get parties by id\r\nstatic getOneparty(req, res) {\r\n  const { id } = req.params;\r\n  const post = parties.find(oneparties => oneparties.id == id);\r\n  if (post) {\r\n    return res.status(200).json({\r\n      message: \"one party found\",\r\n      onePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no party found with that id\"\r\n    });\r\n  }\r\n}\r\n// get office by id\r\nstatic getOneoffice(req, res) {\r\n  const { id } = req.params;\r\n  const post = office.find(oneoffice => oneoffice.id == id);\r\n  if (post) {\r\n    return res.status(200).json({\r\n      message: \"one office found\",\r\n      onePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no office found with that id\"\r\n    });\r\n  }\r\n}\r\n//get candidate by id\r\nstatic getOnecandidate(req, res) {\r\n  const { id } = req.params;\r\n  const post = candidates.find(onecandidates => onecandidates.id == id);\r\n  if (post) {\r\n    return res.status(200).json({\r\n      message: \"one candidates found\",\r\n      onePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no candidates found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get votes by id\r\nstatic getOnevote(req, res) {\r\n  const { id } = req.params;\r\n  const post = votes.find(onevotes => onevotes.id == id);\r\n  if (post) {\r\n    return res.status(200).json({\r\n      message: \"one vote found\",\r\n      onePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no vote found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get petition by id\r\nstatic getOnepetition(req, res) {\r\n  const { id } = req.params;\r\n  const post = petition.find(onepetition => onepetition.id == id);\r\n  if (post) {\r\n    return res.status(200).json({\r\n      message: \"one petition found\",\r\n      onePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no petition found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//update data function\r\n\r\nstatic updateoffice(req, res) {\r\n  const { id } = req.params;\r\n  const post = office.find(updatePost => updatePost.id == id);\r\n  if (post) {\r\n    (post.name = req.body.name), (post.type=req.body.type),(post.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"successfully updated\",\r\n      updatePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"post cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\nstatic updateparty(req, res) {\r\n  const { id } = req.params;\r\n  const post = parties.find(updatePost => updatePost.id == id);\r\n  if (post) {\r\n    (post.name = req.body.name), (post.HQAddress=req.body.HQAddress), (post.logourl=req.body.logourl), (post.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"successfully updated\",\r\n      updatePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"post cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\nstatic updateuser(req, res) {\r\n  const { id } = req.params;\r\n  const post = user.find(updatePost => updatePost.id == id);\r\n  if (post) {\r\n        (post.firstname = req.body.firstname), (post.lastname=req.body.lastname), (post.othername=req.body.othername),(post.email=req.body.email),(post.phonenumber=req.body.phonenumber),(post.passporturl=req.body.passporturl),(post.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"user successfully updated\",\r\n      updatePost: post\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"post cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n// delete data functions \r\n\r\n  static deleteparties(req, res) {\r\n    let { id } = req.params;\r\n    const findPost = parties.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findPost) {\r\n      parties.pop(findPost);\r\n      const newparties = parties.filter(post => {\r\n        return post !== findPost;\r\n      });\r\n      res.status(200).json({\r\n        message: \"party successfully deleted\",\r\n        Posts: newparties\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a party\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteuser(req, res) {\r\n    let { id } = req.params;\r\n    const findPost = user.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findPost) {\r\n      user.pop(findPost);\r\n      const newparties = user.filter(post => {\r\n        return post !== findPost;\r\n      });\r\n      res.status(200).json({\r\n        message: \"user successfully deleted\",\r\n        Posts: newparties\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a user\"\r\n      });\r\n    }\r\n  }\r\n  static deletecandidate(req, res) {\r\n    let { id } = req.params;\r\n    const findPost = candidates.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findPost) {\r\n      candidates.pop(findPost);\r\n      const newparties = candidates.filter(post => {\r\n        return post !== findPost;\r\n      });\r\n      res.status(200).json({\r\n        message: \"candidate successfully deleted\",\r\n        Posts: newparties\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a candidate\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteoffice(req, res) {\r\n    let { id } = req.params;\r\n    const findPost = office.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findPost) {\r\n      office.pop(findPost);\r\n      const newparties = office.filter(post => {\r\n        return post !== findPost;\r\n      });\r\n      res.status(200).json({\r\n        message: \"office successfully deleted\",\r\n        Posts: newparties\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete an office\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nstatic deletepetition(req, res) {\r\n  let { id } = req.params;\r\n  const findPost = petition.find(post => {\r\n    return post.id == id;\r\n  });\r\n  if (findPost) {\r\n    petition.pop(findPost);\r\n    const newparties = petition.filter(post => {\r\n      return post !== findPost;\r\n    });\r\n    res.status(200).json({\r\n      message: \"petition successfully deleted\",\r\n      Posts: newparties\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"could not delete a petition\"\r\n    });\r\n  }\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default postsController;"]}